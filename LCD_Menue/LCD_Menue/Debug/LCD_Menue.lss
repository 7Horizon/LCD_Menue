
LCD_Menue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800200  00800200  0000031c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a37  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000250  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000059f  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d4  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002f4  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000438  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ea       	ldi	r30, 0xA8	; 168
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b4 d0       	rcall	.+360    	; 0x288 <main>
 120:	c1 c0       	rjmp	.+386    	; 0x2a4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_enable>:
	}	
}

void switchInit()
{
	SWITCH_D = 0x00;	
 124:	15 9a       	sbi	0x02, 5	; 2
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_enable+0x4>
 12c:	00 00       	nop
 12e:	82 b1       	in	r24, 0x02	; 2
 130:	12 b8       	out	0x02, r1	; 2
 132:	08 95       	ret

00000134 <lcd_out>:
 134:	92 b1       	in	r25, 0x02	; 2
 136:	90 7f       	andi	r25, 0xF0	; 240
 138:	92 b9       	out	0x02, r25	; 2
 13a:	92 b1       	in	r25, 0x02	; 2
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	98 2b       	or	r25, r24
 142:	92 b9       	out	0x02, r25	; 2
 144:	ef cf       	rjmp	.-34     	; 0x124 <lcd_enable>
 146:	08 95       	ret

00000148 <lcd_command>:
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
 14c:	82 b1       	in	r24, 0x02	; 2
 14e:	12 b8       	out	0x02, r1	; 2
 150:	8c 2f       	mov	r24, r28
 152:	f0 df       	rcall	.-32     	; 0x134 <lcd_out>
 154:	8c 2f       	mov	r24, r28
 156:	82 95       	swap	r24
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	ec df       	rcall	.-40     	; 0x134 <lcd_out>
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_command+0x18>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_command+0x1e>
 166:	00 00       	nop
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_main>:
 16c:	80 91 05 02 	lds	r24, 0x0205
 170:	eb cf       	rjmp	.-42     	; 0x148 <lcd_command>
 172:	08 95       	ret

00000174 <blink_off>:
 174:	80 91 05 02 	lds	r24, 0x0205
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	80 93 05 02 	sts	0x0205, r24
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <lcd_main>
 180:	08 95       	ret

00000182 <cur_off>:
 182:	80 91 05 02 	lds	r24, 0x0205
 186:	8c 7f       	andi	r24, 0xFC	; 252
 188:	80 93 05 02 	sts	0x0205, r24
 18c:	ef cf       	rjmp	.-34     	; 0x16c <lcd_main>
 18e:	08 95       	ret

00000190 <lcd_clear>:
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	da cf       	rjmp	.-76     	; 0x148 <lcd_command>
 194:	08 95       	ret

00000196 <lcd_init>:
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	81 b9       	out	0x01, r24	; 1
 19a:	12 b8       	out	0x02, r1	; 2
 19c:	8f e5       	ldi	r24, 0x5F	; 95
 19e:	9a ee       	ldi	r25, 0xEA	; 234
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0xa>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init+0x10>
 1a6:	00 00       	nop
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	c4 df       	rcall	.-120    	; 0x134 <lcd_out>
 1ac:	8f e1       	ldi	r24, 0x1F	; 31
 1ae:	9e e4       	ldi	r25, 0x4E	; 78
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x1a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init+0x20>
 1b6:	00 00       	nop
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	bc df       	rcall	.-136    	; 0x134 <lcd_out>
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	97 e2       	ldi	r25, 0x27	; 39
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x2a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_init+0x30>
 1c6:	00 00       	nop
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	b4 df       	rcall	.-152    	; 0x134 <lcd_out>
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x3a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x40>
 1d6:	00 00       	nop
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	ac df       	rcall	.-168    	; 0x134 <lcd_out>
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x4a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x50>
 1e6:	00 00       	nop
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	ae df       	rcall	.-164    	; 0x148 <lcd_command>
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	ac df       	rcall	.-168    	; 0x148 <lcd_command>
 1f0:	cf df       	rcall	.-98     	; 0x190 <lcd_clear>
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	a9 df       	rcall	.-174    	; 0x148 <lcd_command>
 1f6:	9f e7       	ldi	r25, 0x7F	; 127
 1f8:	28 e3       	ldi	r18, 0x38	; 56
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	91 50       	subi	r25, 0x01	; 1
 1fe:	20 40       	sbci	r18, 0x00	; 0
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <lcd_init+0x66>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x70>
 206:	00 00       	nop
 208:	08 95       	ret

0000020a <countBits>:
}

int countBits(byte Byte)
{
 20a:	48 2f       	mov	r20, r24
	int carryCount = 0;
	
	while(Byte > 0)
 20c:	88 23       	and	r24, r24
 20e:	51 f0       	breq	.+20     	; 0x224 <countBits+0x1a>
	SWITCH_D = 0x00;	
}

int countBits(byte Byte)
{
	int carryCount = 0;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
	
	while(Byte > 0)
	{
		carryCount += Byte % 2;
 214:	24 2f       	mov	r18, r20
 216:	21 70       	andi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	82 0f       	add	r24, r18
 21c:	93 1f       	adc	r25, r19
		Byte /= 2;
 21e:	46 95       	lsr	r20

int countBits(byte Byte)
{
	int carryCount = 0;
	
	while(Byte > 0)
 220:	c9 f7       	brne	.-14     	; 0x214 <countBits+0xa>
 222:	08 95       	ret
	SWITCH_D = 0x00;	
}

int countBits(byte Byte)
{
	int carryCount = 0;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
		carryCount += Byte % 2;
		Byte /= 2;
	}
	
	return(carryCount);
 228:	08 95       	ret

0000022a <checkInput>:
}

void checkInput()
{
	
	switchValue = 0;
 22a:	10 92 07 02 	sts	0x0207, r1
	
	if(countBits(SWITCH) == 1){
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	ec df       	rcall	.-40     	; 0x20a <countBits>
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	11 f5       	brne	.+68     	; 0x27a <checkInput+0x50>
				
		if(keyCounter == 0){
 236:	80 91 00 02 	lds	r24, 0x0200
 23a:	81 11       	cpse	r24, r1
 23c:	04 c0       	rjmp	.+8      	; 0x246 <checkInput+0x1c>
			pressedSwitch = SWITCH;
 23e:	95 b1       	in	r25, 0x05	; 5
 240:	90 93 06 02 	sts	0x0206, r25
 244:	16 c0       	rjmp	.+44     	; 0x272 <checkInput+0x48>
		}
		else{
			if((keyCounter == 5) || ((keyCounter % 10 == 0)&&(keyCounter > 29))){
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	81 f0       	breq	.+32     	; 0x26a <checkInput+0x40>
 24a:	9d ec       	ldi	r25, 0xCD	; 205
 24c:	89 9f       	mul	r24, r25
 24e:	91 2d       	mov	r25, r1
 250:	11 24       	eor	r1, r1
 252:	96 95       	lsr	r25
 254:	96 95       	lsr	r25
 256:	96 95       	lsr	r25
 258:	99 0f       	add	r25, r25
 25a:	29 2f       	mov	r18, r25
 25c:	22 0f       	add	r18, r18
 25e:	22 0f       	add	r18, r18
 260:	92 0f       	add	r25, r18
 262:	89 13       	cpse	r24, r25
 264:	06 c0       	rjmp	.+12     	; 0x272 <checkInput+0x48>
 266:	8e 31       	cpi	r24, 0x1E	; 30
 268:	20 f0       	brcs	.+8      	; 0x272 <checkInput+0x48>
				switchValue = pressedSwitch;
 26a:	90 91 06 02 	lds	r25, 0x0206
 26e:	90 93 07 02 	sts	0x0207, r25
			}
		}
					
		keyCounter++;
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 00 02 	sts	0x0200, r24
 278:	08 95       	ret
	}
	else{
		if(keyCounter > 5){
 27a:	80 91 00 02 	lds	r24, 0x0200
 27e:	86 30       	cpi	r24, 0x06	; 6
 280:	10 f0       	brcs	.+4      	; 0x286 <checkInput+0x5c>
			keyCounter = 0;
 282:	10 92 00 02 	sts	0x0200, r1
 286:	08 95       	ret

00000288 <main>:
	}	
}

void switchInit()
{
	SWITCH_D = 0x00;	
 288:	11 b8       	out	0x01, r1	; 1
struct status Displaystatus;

int main(void)
{
	switchInit();
	lcd_init();
 28a:	85 df       	rcall	.-246    	; 0x196 <lcd_init>
	cur_off();
 28c:	7a df       	rcall	.-268    	; 0x182 <cur_off>
	blink_off();
 28e:	72 df       	rcall	.-284    	; 0x174 <blink_off>

	
	Displaystatus.level = 0;
 290:	10 92 01 02 	sts	0x0201, r1
	Displaystatus.mode = 0;
 294:	10 92 04 02 	sts	0x0204, r1
	Displaystatus.X = 0;
 298:	10 92 03 02 	sts	0x0203, r1
	Displaystatus.Y = 0;
 29c:	10 92 02 02 	sts	0x0202, r1
	
    while(1)
    {
        checkInput();
 2a0:	c4 df       	rcall	.-120    	; 0x22a <checkInput>
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0x18>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
